# MIT License

# Copyright (c) 2020-2021 Chris Farris (https://www.chrisfarris.com)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

AWSTemplateFormatVersion: '2010-09-09'
Description: SECCDC Competition VPC VPN Service

# Paremeters are inputs to CloudFormation. As convention I always prefix them with "p" so it's
# obvious when referencing a Parameter or Resource
Parameters:

  pVPCDomain:
    Description: Fake DNS Zone for this vpc
    Type: String
    Default: corporate.seccdc.net

  pVpcCIDR:
    Description: CIDR block for VPC
    Type: String
    Default: 10.10.999.0/24

  pVpcDNSServer:
    Description: DNS Server in the VPC (CIDR Range +2)
    Type: String
    Default: 10.10.999.2

  pVpnCIDR:
    Description: CIDR block for The Client VPN machines (should be /22)
    Type: String
    Default: 10.10.200.0/22

  pCorporateCIDR:
    Type: String
    Description: CIDR Range for the entire corporate network.
    Default: 10.0.0.0/8

  pTransitGatewayID:
    Description: ID of the TransitGateway or NONE to not deploy TGW routes
    Type: String
    Default: NONE

  pNetworkStack:
    Description: Name of the VPC Cloudformation Stack
    Type: String
    Default: Corporate-VPC

  pClientRootCertificateChainArn:
    # See https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html#mutual for where this comes from
    Description: Arn of the Private Cert CA Created
    Type: String

  pCertificateArn:
    Description: Arn of the Wildcard Certificate
    Type: String

  pActiveDirectoryId:
    Type: String
    Description: DirectoryID of the SimpleAD created for the competition
    Default: NONE

Resources:

  ClientVpnEndpoint:
    Type: AWS::EC2::ClientVpnEndpoint
    DependsOn: ClientVPNLogStream
    Properties:
      AuthenticationOptions:
        # Types here are AND not OR. Disable Cert if we're just using AD.
        # Initial login can use the AWS generated Administrator user
        # - Type: certificate-authentication
        #   MutualAuthentication:
        #     ClientRootCertificateChainArn: !Ref pClientRootCertificateChainArn
        - Type: directory-service-authentication
          ActiveDirectory:
             DirectoryId: !Ref pActiveDirectoryId
      ClientCidrBlock: !Ref pVpnCIDR
      ConnectionLogOptions:
        CloudwatchLogGroup: !Ref ClientVPNLogGroup
        CloudwatchLogStream: !Ref ClientVPNLogStream
        Enabled: True
      Description: !Sub "ClientVPN deployed by ${AWS::StackName}"
      DnsServers:
        - !Ref pVpcDNSServer
      SecurityGroupIds:
        - !Ref ClientVPNSecurityGroup
      SelfServicePortal: enabled
      ServerCertificateArn: !Ref pCertificateArn
      SplitTunnel: True
      TransportProtocol: tcp
      VpcId:
        Fn::ImportValue: !Sub "${pNetworkStack}-VpcId"
      VpnPort: 443

  Public1ClientVpnTargetNetworkAssociation:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId:
        Fn::ImportValue: !Sub "${pNetworkStack}-PublicSubnetA"

  Public2ClientVpnTargetNetworkAssociation:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId:
        Fn::ImportValue: !Sub "${pNetworkStack}-PublicSubnetB"

  ClientVPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${pNetworkStack}-VpcId"
      GroupDescription: !Sub "Generated by the ${AWS::StackName}"
      GroupName: !Sub "${AWS::StackName}-SecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref pCorporateCIDR
          Description: "Added by Cloudformation at stack create"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref pCorporateCIDR
          Description: "Added by Cloudformation at stack create"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecurityGroup"

  AuthEverythingRule:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      AuthorizeAllGroups: true
      TargetNetworkCidr: !Ref pCorporateCIDR
      Description: "AuthEverythingRule"

  Public1ClientVpnRoute:
    Type: AWS::EC2::ClientVpnRoute
    DependsOn: Public1ClientVpnTargetNetworkAssociation
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      Description: !Sub "Route all Traffic for CorpCIDR"
      DestinationCidrBlock: !Ref pCorporateCIDR
      TargetVpcSubnetId:
        Fn::ImportValue: !Sub "${pNetworkStack}-PublicSubnetA"

  Public2ClientVpnRoute:
    Type: AWS::EC2::ClientVpnRoute
    DependsOn: Public2ClientVpnTargetNetworkAssociation
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      Description: !Sub "Route all Traffic for CorpCIDR"
      DestinationCidrBlock: !Ref pCorporateCIDR
      TargetVpcSubnetId:
        Fn::ImportValue: !Sub "${pNetworkStack}-PublicSubnetB"

  ClientVPNLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-ConnectionLogs"
      RetentionInDays: 90

  ClientVPNLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref ClientVPNLogGroup
      LogStreamName: !Ref AWS::StackName


Outputs:

  SelfServicePortal:
    Value: !Sub "https://self-service.clientvpn.amazonaws.com/endpoints/${ClientVpnEndpoint}"

  VPNDnsName:
    Value: !Sub "*.${ClientVpnEndpoint}.prod.clientvpn.${AWS::Region}.amazonaws.com"

  VPNClientEndpointId:
    Value: !Ref ClientVpnEndpoint





